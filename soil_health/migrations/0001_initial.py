# Generated by Django 4.2.7 on 2025-08-30 21:02

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SoilTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_type', models.CharField(choices=[('ph', 'pH Test'), ('npk', 'NPK Test'), ('organic_matter', 'Organic Matter Test'), ('micronutrients', 'Micronutrients Test'), ('texture', 'Soil Texture Test'), ('salinity', 'Salinity Test'), ('comprehensive', 'Comprehensive Test')], max_length=20)),
                ('test_date', models.DateField()),
                ('location', models.CharField(max_length=200)),
                ('soil_depth', models.CharField(blank=True, max_length=100, null=True)),
                ('sample_weight', models.CharField(blank=True, max_length=100, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soil_tests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SoilTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('testing', 'Soil Testing'), ('improvement', 'Soil Improvement'), ('conservation', 'Soil Conservation'), ('organic', 'Organic Methods'), ('nutrients', 'Nutrient Management'), ('erosion', 'Erosion Control'), ('general', 'General')], max_length=20)),
                ('content', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='soil_tips/')),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SoilType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Soil Type',
                'verbose_name_plural': 'Soil Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SoilTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameter', models.CharField(choices=[('ph', 'pH Level'), ('nitrogen', 'Nitrogen (N)'), ('phosphorus', 'Phosphorus (P)'), ('potassium', 'Potassium (K)'), ('organic_matter', 'Organic Matter'), ('calcium', 'Calcium (Ca)'), ('magnesium', 'Magnesium (Mg)'), ('sulfur', 'Sulfur (S)'), ('zinc', 'Zinc (Zn)'), ('iron', 'Iron (Fe)'), ('manganese', 'Manganese (Mn)'), ('copper', 'Copper (Cu)'), ('boron', 'Boron (B)'), ('electrical_conductivity', 'Electrical Conductivity')], max_length=30)),
                ('value', models.DecimalField(decimal_places=3, max_digits=8)),
                ('unit', models.CharField(max_length=20)),
                ('status', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('optimal', 'Optimal')], max_length=20)),
                ('recommendation', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('soil_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='soil_health.soiltest')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SoilMonitoringSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monitoring_type', models.CharField(choices=[('ph', 'pH Monitoring'), ('nutrients', 'Nutrient Monitoring'), ('organic_matter', 'Organic Matter Monitoring'), ('erosion', 'Erosion Monitoring'), ('compaction', 'Compaction Monitoring'), ('comprehensive', 'Comprehensive Monitoring')], max_length=20)),
                ('description', models.TextField()),
                ('frequency', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('seasonally', 'Seasonally'), ('annually', 'Annually'), ('custom', 'Custom')], max_length=20)),
                ('next_monitoring_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soil_monitoring_schedules', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['next_monitoring_date'],
            },
        ),
        migrations.CreateModel(
            name='SoilImprovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('improvement_type', models.CharField(choices=[('organic_matter', 'Organic Matter Addition'), ('ph_adjustment', 'pH Adjustment'), ('drainage', 'Drainage Improvement'), ('erosion_control', 'Erosion Control'), ('compaction_relief', 'Compaction Relief'), ('nutrient_management', 'Nutrient Management'), ('crop_rotation', 'Crop Rotation'), ('cover_cropping', 'Cover Cropping'), ('mulching', 'Mulching'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField()),
                ('location', models.CharField(max_length=200)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', max_length=20)),
                ('progress_percentage', models.IntegerField(default=0, help_text='Progress percentage (0-100)')),
                ('effectiveness', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('excellent', 'Excellent')], max_length=20, null=True)),
                ('results', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soil_improvements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SoilHealthRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_date', models.DateField()),
                ('location', models.CharField(max_length=200)),
                ('ph_level', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('organic_matter', models.DecimalField(blank=True, decimal_places=2, help_text='Organic matter %', max_digits=4, null=True)),
                ('nitrogen', models.DecimalField(blank=True, decimal_places=2, help_text='N in kg/ha', max_digits=5, null=True)),
                ('phosphorus', models.DecimalField(blank=True, decimal_places=2, help_text='P in kg/ha', max_digits=5, null=True)),
                ('potassium', models.DecimalField(blank=True, decimal_places=2, help_text='K in kg/ha', max_digits=5, null=True)),
                ('calcium', models.DecimalField(blank=True, decimal_places=2, help_text='Ca in meq/100g', max_digits=5, null=True)),
                ('magnesium', models.DecimalField(blank=True, decimal_places=2, help_text='Mg in meq/100g', max_digits=5, null=True)),
                ('sulfur', models.DecimalField(blank=True, decimal_places=2, help_text='S in ppm', max_digits=5, null=True)),
                ('micronutrients', models.TextField(blank=True, help_text='Other micronutrients data', null=True)),
                ('is_healthy', models.BooleanField(default=True)),
                ('health_score', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('soil_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='soil_health.soiltype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soil_health_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-record_date'],
            },
        ),
        migrations.CreateModel(
            name='SoilHealthAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('degradation', 'Soil Degradation'), ('erosion', 'Erosion Risk'), ('nutrient_deficiency', 'Nutrient Deficiency'), ('ph_imbalance', 'pH Imbalance'), ('compaction', 'Soil Compaction'), ('salinity', 'Salinity Issues'), ('organic_matter', 'Low Organic Matter'), ('other', 'Other')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soil_health_alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SoilConservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conservation_type', models.CharField(choices=[('terracing', 'Terracing'), ('contour_plowing', 'Contour Plowing'), ('strip_cropping', 'Strip Cropping'), ('windbreaks', 'Windbreaks'), ('grassed_waterways', 'Grassed Waterways'), ('conservation_tillage', 'Conservation Tillage'), ('buffer_strips', 'Buffer Strips'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField()),
                ('location', models.CharField(max_length=200)),
                ('implementation_date', models.DateField()),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('funding_source', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('implemented', 'Implemented'), ('maintained', 'Maintained'), ('abandoned', 'Abandoned')], default='planned', max_length=20)),
                ('effectiveness', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('excellent', 'Excellent')], max_length=20, null=True)),
                ('monitoring_frequency', models.CharField(blank=True, max_length=100, null=True)),
                ('last_monitoring_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soil_conservations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FertilizerRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fertilizer_name', models.CharField(max_length=200)),
                ('application_rate', models.CharField(max_length=100)),
                ('application_method', models.CharField(max_length=100)),
                ('recommendation', models.TextField()),
                ('precautions', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('soil_test_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fertilizer_recommendations', to='soil_health.soiltestresult')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]

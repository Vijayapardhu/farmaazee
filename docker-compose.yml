version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: farmazee_postgres
    environment:
      POSTGRES_DB: farmazee_db
      POSTGRES_USER: farmazee_user
      POSTGRES_PASSWORD: farmazee_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - farmazee_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U farmazee_user -d farmazee_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Message Queue
  redis:
    image: redis:7-alpine
    container_name: farmazee_redis
    command: redis-server --appendonly yes --requirepass farmazee_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - farmazee_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: farmazee_celery_worker
    command: celery -A farmazee worker -l info --concurrency=4
    environment:
      - REDIS_URL=redis://:farmazee_redis_password@redis:6379/5
      - DB_HOST=postgres
      - DB_NAME=farmazee_db
      - DB_USER=farmazee_user
      - DB_PASSWORD=farmazee_password
    volumes:
      - .:/app
      - ./media:/app/media
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - farmazee_network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: farmazee_celery_beat
    command: celery -A farmazee beat -l info
    environment:
      - REDIS_URL=redis://:farmazee_redis_password@redis:6379/5
      - DB_HOST=postgres
      - DB_NAME=farmazee_db
      - DB_USER=farmazee_user
      - DB_PASSWORD=farmazee_password
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - farmazee_network
    restart: unless-stopped

  # Celery Flower for Monitoring
  celery_flower:
    image: mher/flower:1.0
    container_name: farmazee_celery_flower
    command: celery flower --broker=redis://:farmazee_redis_password@redis:6379/5 --port=5555
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - farmazee_network
    restart: unless-stopped

  # Django Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: farmazee_web
    command: gunicorn farmazee.wsgi:application --bind 0.0.0.0:8000 --workers 4 --worker-class gevent --worker-connections 1000 --max-requests 1000 --max-requests-jitter 100 --timeout 30 --keep-alive 2
    environment:
      - REDIS_URL=redis://:farmazee_redis_password@redis:6379/5
      - DB_HOST=postgres
      - DB_NAME=farmazee_db
      - DB_USER=farmazee_user
      - DB_PASSWORD=farmazee_password
      - DEBUG=False
      - ENVIRONMENT=production
    volumes:
      - .:/app
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - farmazee_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: farmazee_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./staticfiles:/var/www/static:ro
      - ./media:/var/www/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      web:
        condition: service_healthy
    networks:
      - farmazee_network
    restart: unless-stopped

  # Elasticsearch for Advanced Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: farmazee_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - farmazee_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for Elasticsearch Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: farmazee_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - farmazee_network
    restart: unless-stopped

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: farmazee_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - farmazee_network
    restart: unless-stopped

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: farmazee_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_started
    networks:
      - farmazee_network
    restart: unless-stopped

  # MinIO for Object Storage (Alternative to S3)
  minio:
    image: minio/minio:latest
    container_name: farmazee_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: farmazee_minio_user
      MINIO_ROOT_PASSWORD: farmazee_minio_password
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - farmazee_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Traefik for Load Balancing and SSL Termination
  traefik:
    image: traefik:v2.10
    container_name: farmazee_traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@farmazee.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt
    networks:
      - farmazee_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local
  traefik_certs:
    driver: local

networks:
  farmazee_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16


# Generated by Django 4.2.7 on 2025-08-31 04:39

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('model_type', models.CharField(choices=[('crop_prediction', 'Crop Prediction'), ('disease_detection', 'Disease Detection'), ('yield_forecast', 'Yield Forecast'), ('weather_prediction', 'Weather Prediction'), ('market_prediction', 'Market Prediction'), ('soil_analysis', 'Soil Analysis'), ('pest_detection', 'Pest Detection'), ('irrigation_optimization', 'Irrigation Optimization')], max_length=50)),
                ('version', models.CharField(max_length=20)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('training', 'Training'), ('active', 'Active'), ('inactive', 'Inactive'), ('error', 'Error'), ('deprecated', 'Deprecated')], default='inactive', max_length=20)),
                ('model_file', models.FileField(blank=True, null=True, upload_to='ai_models/')),
                ('weights_file', models.FileField(blank=True, null=True, upload_to='ai_models/weights/')),
                ('config_file', models.JSONField(default=dict)),
                ('accuracy', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('precision', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('recall', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('f1_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('training_data_size', models.PositiveIntegerField(default=0)),
                ('training_duration', models.DurationField(blank=True, null=True)),
                ('last_trained', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_models', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Model',
                'verbose_name_plural': 'AI Models',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('source_type', models.CharField(choices=[('satellite', 'Satellite Imagery'), ('drone', 'Drone Imagery'), ('sensor', 'IoT Sensors'), ('weather_station', 'Weather Station'), ('market_data', 'Market Data'), ('soil_lab', 'Soil Laboratory'), ('manual_input', 'Manual Input'), ('api', 'External API'), ('database', 'Database')], max_length=50)),
                ('description', models.TextField()),
                ('data_format', models.CharField(max_length=50)),
                ('update_frequency', models.CharField(help_text='How often data is updated', max_length=100)),
                ('data_quality_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('access_url', models.URLField(blank=True)),
                ('api_key_required', models.BooleanField(default=False)),
                ('rate_limit', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Data Source',
                'verbose_name_plural': 'Data Sources',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TrainingJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('training_config', models.JSONField(help_text='Training configuration parameters')),
                ('dataset_info', models.JSONField(help_text='Information about the training dataset')),
                ('progress_percentage', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('current_epoch', models.PositiveIntegerField(default=0)),
                ('total_epochs', models.PositiveIntegerField()),
                ('training_loss', models.FloatField(blank=True, null=True)),
                ('validation_loss', models.FloatField(blank=True, null=True)),
                ('training_accuracy', models.FloatField(blank=True, null=True)),
                ('validation_accuracy', models.FloatField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('training_logs', models.TextField(blank=True)),
                ('error_message', models.TextField(blank=True)),
                ('artifacts_path', models.CharField(blank=True, max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_jobs', to='ai_ml.aimodel')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='training_jobs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Training Job',
                'verbose_name_plural': 'Training Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recommendation_type', models.CharField(choices=[('crop_selection', 'Crop Selection'), ('planting_time', 'Planting Time'), ('irrigation_schedule', 'Irrigation Schedule'), ('fertilizer_application', 'Fertilizer Application'), ('pest_control', 'Pest Control'), ('disease_prevention', 'Disease Prevention'), ('harvest_timing', 'Harvest Timing'), ('market_timing', 'Market Timing'), ('equipment_usage', 'Equipment Usage'), ('resource_allocation', 'Resource Allocation')], max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('action_items', models.JSONField(default=list, help_text='List of specific actions to take')),
                ('expected_benefits', models.TextField(help_text='Expected benefits of following the recommendation')),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('reasoning', models.TextField(help_text='AI reasoning behind the recommendation')),
                ('supporting_data', models.JSONField(default=dict, help_text='Supporting data and evidence')),
                ('is_read', models.BooleanField(default=False)),
                ('is_applied', models.BooleanField(default=False)),
                ('applied_at', models.DateTimeField(blank=True, null=True)),
                ('feedback_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback_comment', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recommendation',
                'verbose_name_plural': 'Recommendations',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('prediction_type', models.CharField(choices=[('crop_yield', 'Crop Yield'), ('disease_risk', 'Disease Risk'), ('pest_infestation', 'Pest Infestation'), ('weather_forecast', 'Weather Forecast'), ('market_price', 'Market Price'), ('soil_health', 'Soil Health'), ('irrigation_schedule', 'Irrigation Schedule'), ('fertilizer_recommendation', 'Fertilizer Recommendation')], max_length=50)),
                ('input_data', models.JSONField(help_text='Input data used for prediction')),
                ('prediction_result', models.JSONField(help_text='Prediction output')),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('confidence_level', models.CharField(choices=[('low', 'Low (< 60%)'), ('medium', 'Medium (60-80%)'), ('high', 'High (80-95%)'), ('very_high', 'Very High (> 95%)')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='ai_ml.aimodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Prediction',
                'verbose_name_plural': 'Predictions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalTrainingJob',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('training_config', models.JSONField(help_text='Training configuration parameters')),
                ('dataset_info', models.JSONField(help_text='Information about the training dataset')),
                ('progress_percentage', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('current_epoch', models.PositiveIntegerField(default=0)),
                ('total_epochs', models.PositiveIntegerField()),
                ('training_loss', models.FloatField(blank=True, null=True)),
                ('validation_loss', models.FloatField(blank=True, null=True)),
                ('training_accuracy', models.FloatField(blank=True, null=True)),
                ('validation_accuracy', models.FloatField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('training_logs', models.TextField(blank=True)),
                ('error_message', models.TextField(blank=True)),
                ('artifacts_path', models.CharField(blank=True, max_length=500)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ai_ml.aimodel')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Training Job',
                'verbose_name_plural': 'historical Training Jobs',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRecommendation',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('recommendation_type', models.CharField(choices=[('crop_selection', 'Crop Selection'), ('planting_time', 'Planting Time'), ('irrigation_schedule', 'Irrigation Schedule'), ('fertilizer_application', 'Fertilizer Application'), ('pest_control', 'Pest Control'), ('disease_prevention', 'Disease Prevention'), ('harvest_timing', 'Harvest Timing'), ('market_timing', 'Market Timing'), ('equipment_usage', 'Equipment Usage'), ('resource_allocation', 'Resource Allocation')], max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('action_items', models.JSONField(default=list, help_text='List of specific actions to take')),
                ('expected_benefits', models.TextField(help_text='Expected benefits of following the recommendation')),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('reasoning', models.TextField(help_text='AI reasoning behind the recommendation')),
                ('supporting_data', models.JSONField(default=dict, help_text='Supporting data and evidence')),
                ('is_read', models.BooleanField(default=False)),
                ('is_applied', models.BooleanField(default=False)),
                ('applied_at', models.DateTimeField(blank=True, null=True)),
                ('feedback_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback_comment', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Recommendation',
                'verbose_name_plural': 'historical Recommendations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPrediction',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('prediction_type', models.CharField(choices=[('crop_yield', 'Crop Yield'), ('disease_risk', 'Disease Risk'), ('pest_infestation', 'Pest Infestation'), ('weather_forecast', 'Weather Forecast'), ('market_price', 'Market Price'), ('soil_health', 'Soil Health'), ('irrigation_schedule', 'Irrigation Schedule'), ('fertilizer_recommendation', 'Fertilizer Recommendation')], max_length=50)),
                ('input_data', models.JSONField(help_text='Input data used for prediction')),
                ('prediction_result', models.JSONField(help_text='Prediction output')),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('confidence_level', models.CharField(choices=[('low', 'Low (< 60%)'), ('medium', 'Medium (60-80%)'), ('high', 'High (80-95%)'), ('very_high', 'Very High (> 95%)')], max_length=20)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ai_ml.aimodel')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Prediction',
                'verbose_name_plural': 'historical Predictions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataSource',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=200)),
                ('source_type', models.CharField(choices=[('satellite', 'Satellite Imagery'), ('drone', 'Drone Imagery'), ('sensor', 'IoT Sensors'), ('weather_station', 'Weather Station'), ('market_data', 'Market Data'), ('soil_lab', 'Soil Laboratory'), ('manual_input', 'Manual Input'), ('api', 'External API'), ('database', 'Database')], max_length=50)),
                ('description', models.TextField()),
                ('data_format', models.CharField(max_length=50)),
                ('update_frequency', models.CharField(help_text='How often data is updated', max_length=100)),
                ('data_quality_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('access_url', models.URLField(blank=True)),
                ('api_key_required', models.BooleanField(default=False)),
                ('rate_limit', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('is_active', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Data Source',
                'verbose_name_plural': 'historical Data Sources',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalComputerVisionAnalysis',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('analysis_type', models.CharField(choices=[('crop_health', 'Crop Health'), ('disease_detection', 'Disease Detection'), ('pest_detection', 'Pest Detection'), ('growth_stage', 'Growth Stage'), ('weed_detection', 'Weed Detection'), ('soil_analysis', 'Soil Analysis'), ('equipment_detection', 'Equipment Detection')], max_length=50)),
                ('image', models.TextField(max_length=100)),
                ('thumbnail', models.TextField(blank=True, max_length=100, null=True)),
                ('analysis_result', models.JSONField(help_text='Computer vision analysis results')),
                ('detected_objects', models.JSONField(default=list, help_text='List of detected objects')),
                ('confidence_scores', models.JSONField(default=dict, help_text='Confidence scores for detections')),
                ('processing_time', models.FloatField(help_text='Processing time in seconds')),
                ('model_version', models.CharField(help_text='AI model version used', max_length=20)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('notes', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Computer Vision Analysis',
                'verbose_name_plural': 'historical Computer Vision Analyses',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAIModel',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('model_type', models.CharField(choices=[('crop_prediction', 'Crop Prediction'), ('disease_detection', 'Disease Detection'), ('yield_forecast', 'Yield Forecast'), ('weather_prediction', 'Weather Prediction'), ('market_prediction', 'Market Prediction'), ('soil_analysis', 'Soil Analysis'), ('pest_detection', 'Pest Detection'), ('irrigation_optimization', 'Irrigation Optimization')], max_length=50)),
                ('version', models.CharField(max_length=20)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('training', 'Training'), ('active', 'Active'), ('inactive', 'Inactive'), ('error', 'Error'), ('deprecated', 'Deprecated')], default='inactive', max_length=20)),
                ('model_file', models.TextField(blank=True, max_length=100, null=True)),
                ('weights_file', models.TextField(blank=True, max_length=100, null=True)),
                ('config_file', models.JSONField(default=dict)),
                ('accuracy', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('precision', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('recall', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('f1_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('training_data_size', models.PositiveIntegerField(default=0)),
                ('training_duration', models.DurationField(blank=True, null=True)),
                ('last_trained', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical AI Model',
                'verbose_name_plural': 'historical AI Models',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ComputerVisionAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analysis_type', models.CharField(choices=[('crop_health', 'Crop Health'), ('disease_detection', 'Disease Detection'), ('pest_detection', 'Pest Detection'), ('growth_stage', 'Growth Stage'), ('weed_detection', 'Weed Detection'), ('soil_analysis', 'Soil Analysis'), ('equipment_detection', 'Equipment Detection')], max_length=50)),
                ('image', models.ImageField(upload_to='cv_analysis/')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='cv_analysis/thumbnails/')),
                ('analysis_result', models.JSONField(help_text='Computer vision analysis results')),
                ('detected_objects', models.JSONField(default=list, help_text='List of detected objects')),
                ('confidence_scores', models.JSONField(default=dict, help_text='Confidence scores for detections')),
                ('processing_time', models.FloatField(help_text='Processing time in seconds')),
                ('model_version', models.CharField(help_text='AI model version used', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('notes', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cv_analyses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Computer Vision Analysis',
                'verbose_name_plural': 'Computer Vision Analyses',
                'ordering': ['-created_at'],
            },
        ),
    ]
